/*output "cluster_endpoint" {
    description = "Endpoint for EKS control plane."
    value       = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
    description = "Security group ids attached to the cluster control plane."
    value       = module.eks.cluster_security_group_id
}

output "kubectl_config" {
    description = "kubectl config as generated by the module."
    value       = module.eks.kubeconfig
}

output "config_map_aws_auth" {
    description = "A kubernetes configuration to authenticate to this EKS cluster."
    value       = module.eks.config_map_aws_auth
}
*/

output "region" {
    description = "AWS region."
    value       = var.region
}

locals {
    kubeconfig = <<KUBECONFIG
apiVersion: v1
clusters:
- cluster:
    server: ${aws_eks_cluster.eks_cluster.endpoint}
    certificate-authority-data: ${aws_eks_cluster.eks_cluster.certificate_authority.0.data}
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: aws
  name: aws
current-context: aws
kind: Config
preferences: {}
users:
- name: aws
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      command: aws-iam-authenticator
      args:
        - "token"
        - "-i"
        - "${var.cluster_name}"
KUBECONFIG
    config_map_aws_auth = <<CONFIGMAPAWSAUTH
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: ${aws_iam_role.eks_kubectl_role.arn}
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
CONFIGMAPAWSAUTH
}

output "kubeconfig" {
    value = "${local.kubeconfig}"
}

output "config_map_aws_auth" {
    value = local.config_map_aws_auth
}